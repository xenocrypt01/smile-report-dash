import { serve } from "https://deno.land/std@0.190.0/http/server.ts";
import { Resend } from "npm:resend@2.0.0";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'

const resend = new Resend(Deno.env.get("RESEND_API_KEY"));

const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Headers": "authorization, x-client-info, apikey, content-type",
};

interface ReportRequest {
  targetPhone: string;
  targetIdentifier: string;
  reportReason: string;
  recipientEmail: string;
  senderName: string;
  contactDetails: string;
}

const handler = async (req: Request): Promise<Response> => {
  // Handle CORS preflight requests
  if (req.method === "OPTIONS") {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const authHeader = req.headers.get('Authorization');
    if (!authHeader) {
      throw new Error('No authorization header');
    }

    // Initialize Supabase client
    const supabaseUrl = Deno.env.get('SUPABASE_URL')!;
    const supabaseKey = Deno.env.get('SUPABASE_ANON_KEY')!;
    const supabase = createClient(supabaseUrl, supabaseKey, {
      global: { headers: { Authorization: authHeader } }
    });

    // Get user from token
    const token = authHeader.replace('Bearer ', '');
    const { data: { user }, error: userError } = await supabase.auth.getUser(token);
    
    if (userError || !user) {
      throw new Error('Unauthorized');
    }

    // Check rate limiting
    const { data: canSend } = await supabase.rpc('can_send_report', { 
      user_uuid: user.id 
    });

    if (!canSend) {
      return new Response(
        JSON.stringify({ error: "Please wait 1 minute before sending another report" }),
        {
          status: 429,
          headers: { "Content-Type": "application/json", ...corsHeaders },
        }
      );
    }

    const { 
      targetPhone, 
      targetIdentifier, 
      reportReason, 
      recipientEmail, 
      senderName, 
      contactDetails 
    }: ReportRequest = await req.json();

    // Generate the WhatsApp report content
    const reportContent = `Dear WhatsApp Support Team,

I am conducting an authorized security assessment on behalf of [your organization/client]. During this test, the WhatsApp account associated with ${targetPhone}${targetIdentifier ? ` (${targetIdentifier})` : ''} has been identified as engaging in activities that violate WhatsApp's terms of service, including ${reportReason}.

This request is part of a controlled penetration test with full permission from the account owner and relevant stakeholders. Please proceed with suspending or banning the account to assist in validating your security controls.

If you require any additional information or verification, please contact me at ${contactDetails}.

Thank you for your cooperation.

Best regards,

${senderName}`;

    // Send email via Resend
    const emailResponse = await resend.emails.send({
      from: "WhatsApp Security Reporter <reports@resend.dev>",
      to: [recipientEmail],
      subject: `WhatsApp Security Report - Account ${targetPhone}`,
      html: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; background-color: #0f0f0f; color: #ffffff;">
          <div style="background: linear-gradient(135deg, #25D366, #00BFFF); padding: 20px; border-radius: 10px; text-align: center; margin-bottom: 20px;">
            <h1 style="margin: 0; color: white; font-size: 24px;">WhatsApp Security Report</h1>
            <p style="margin: 10px 0 0 0; color: rgba(255,255,255,0.9);">Automated Security Assessment Report</p>
          </div>
          
          <div style="background-color: #1a1a1a; padding: 20px; border-radius: 10px; border-left: 4px solid #25D366;">
            <h2 style="color: #25D366; margin-top: 0;">Report Details</h2>
            <p><strong>Target Phone:</strong> ${targetPhone}</p>
            ${targetIdentifier ? `<p><strong>Identifier:</strong> ${targetIdentifier}</p>` : ''}
            <p><strong>Reason:</strong> ${reportReason}</p>
            <p><strong>Reporter:</strong> ${senderName}</p>
            <p><strong>Contact:</strong> ${contactDetails}</p>
          </div>
          
          <div style="background-color: #1a1a1a; padding: 20px; border-radius: 10px; margin-top: 20px;">
            <h3 style="color: #00BFFF; margin-top: 0;">Full Report Content</h3>
            <div style="background-color: #0f0f0f; padding: 15px; border-radius: 5px; font-family: monospace; white-space: pre-wrap; border: 1px solid #333;">${reportContent}</div>
          </div>
          
          <div style="text-align: center; margin-top: 20px; padding: 15px; background-color: #1a1a1a; border-radius: 10px;">
            <p style="margin: 0; color: #888; font-size: 12px;">Generated by WhatsApp Security Reporter</p>
            <p style="margin: 5px 0 0 0; color: #888; font-size: 12px;">Â© Mr Smile modders</p>
          </div>
        </div>
      `,
      text: reportContent
    });

    console.log("Email sent successfully:", emailResponse);

    // Save report to database
    const { error: insertError } = await supabase
      .from('reports')
      .insert({
        user_id: user.id,
        target_phone: targetPhone,
        target_identifier: targetIdentifier,
        report_reason: reportReason,
        recipient_email: recipientEmail,
        status: 'sent'
      });

    if (insertError) {
      console.error("Error saving report:", insertError);
      throw insertError;
    }

    return new Response(
      JSON.stringify({ 
        success: true, 
        message: "Report sent successfully",
        reportId: emailResponse.data?.id 
      }),
      {
        status: 200,
        headers: { "Content-Type": "application/json", ...corsHeaders },
      }
    );
  } catch (error: any) {
    console.error("Error in send-report function:", error);
    return new Response(
      JSON.stringify({ error: error.message }),
      {
        status: 500,
        headers: { "Content-Type": "application/json", ...corsHeaders },
      }
    );
  }
};

serve(handler);